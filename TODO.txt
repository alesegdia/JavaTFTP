Next improvements:

*) Server: send files (started)
*) Server: receive files (started)

*) Client: send files (started)
*) Client: receive files (started)

*) Implement timeouts and resend (started)
*) Errors: capture, send and properly finish reporting the error. (started)

*) Implement "ascii" mode. Is necessary to use Reader and Writer instead of InputStream and OutputStream?

Test:

*) Make unitary test?
*) Do cross-validation with other TFTP program

Doubts:

*) What happen with timeout and counter of resends if a packet with incorrect transfer identifier is received?. TFTP can avoid DoS attacks?.
*) We should ignore data blocks with block number equal to block number expected minus 1 and only resend packet when timeout ocurrs?. This is to avoid resend packets when our timeout occurs and when the time out of other application occurs (remember that this two timeouts are the same and this resends could happen in small time interval).

Documentation
 
*) Do a FAQ with the doubts and other questions?
*) Do a flux diagram of the server and client?

Future improvements:

*) Use ByteBuffer (see http://download.oracle.com/javase/6/docs/api/java/nio/ByteBuffer.html ) to simplify or replace Buffer.java

*) Improve the way of parsing (in MainClass) with one of the parsers discussed here: http://stackoverflow.com/questions/367706/is-there-a-good-command-line-argument-parser-for-java

*) Use Enum type (see http://download.oracle.com/javase/tutorial/java/javaOO/enum.html ) to group constants like read/write or octet/ascii/mail

*) Make a graphical user interface (keeping the comand line versi√≥n).

*) Rename (using git mv) Server to TFTP_ServerSocket and Transfer to TFTP_Socket or something similar?

*) Implement TFTP extensions: see Timeout_TransferSize_Options.txt (rfc 1784) and Option_Extension.txt (rfc 1782). Transfer size option is equivalent to blocksize option of Blocksize_Option.txt (rfc 1783)?

*) Divide big files in parts and send it separatelly?

*) Internationalize the application, at least the error messages.

*) Implement file log. Use Log4j?
